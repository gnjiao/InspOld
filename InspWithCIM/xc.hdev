<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>list_files ('E:/项目/设备/产品/巡边检/image/ng', ['files','follow_links','recursive'], ImageFiles)</l>
<l>tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    dev_update_window('off')</l>
<c>    </c>
<l>read_image (Image,ImageFiles[Index])</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_display (Image)</l>
<l>dev_set_window (WindowHandle)</l>
<l>threshold (Image, Region60, 60, 255)</l>
<l>* region_to_bin (Region60, BinImage, 255, 0, Width, Height)</l>
<l>* edges_sub_pix (BinImage, Edges, 'canny', 1, 20, 40)</l>
<l>* select_contours_xld (Edges, SelectedContours, 'contour_length', 200, 20000, 200, 20000)</l>
<l>* union_adjacent_contours_xld (SelectedContours, UnionContours, 10, 1, 'attr_keep')</l>
<l>* smooth_contours_xld (UnionContours, SmoothedContours, 5)</l>
<l>* smallest_rectangle2_xld (SmoothedContours, Row, Column, Phi, Length1, Length2)</l>
<l>* gen_rectangle2 (Rectangle1, Row, Column, Phi, Length1, Length2)</l>
<l>threshold (Image, Region30, 30, 255)</l>
<l>intensity (Region30, Image, Mean1, Deviation1)</l>
<l>stop()</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<c>*----------清晰度计算-------------------------------</c>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>*方差法</c>
<l>* region_to_mean (Image, Image, ImageMean)</l>
<l>* convert_image_type (ImageMean, ImageMeanConvert, 'real')</l>
<l>* convert_image_type (Image, ImageConvert, 'real')</l>
<l>* sub_image (ImageConvert, ImageMeanConvert, ImageSub, 1, 10)</l>
<l>* mult_image (ImageSub, ImageSub, ImageResult, 1, 0)</l>
<l>* intensity (ImageResult, ImageResult, Mean_VAR, Deviation_VAR)</l>
<l>* disp_message (WindowHandle, 'VAR:' + Mean_VAR, 'window', 12, 12, 'black', 'true')</l>
<l>* stop()</l>
<c>*laplace能量</c>
<l>laplace (Image,ImageLaplace4, 'signed', 3, 'n_4')</l>
<l>laplace (Image,ImageLaplace8, 'signed', 3, 'n_8')</l>
<l>add_image (ImageLaplace4, ImageLaplace4, ImageResult_Laplace, 1, 0)</l>
<l>add_image (ImageLaplace4, ImageResult_Laplace, ImageResult_Laplace, 1, 0)</l>
<l>add_image (ImageLaplace8, ImageResult_Laplace, ImageResult_Laplace, 1, 0)</l>
<l>mult_image (ImageResult_Laplace, ImageResult_Laplace, ImageResult_LaplaceMult, 1, 0)</l>
<l>intensity (ImageResult_LaplaceMult,ImageResult_LaplaceMult, Mean_Laplace, Deviation_Laplace)</l>
<l>disp_message (WindowHandle, 'Laplace:' + Mean_Laplace, 'window', 12, 24, 'black', 'true')</l>
<l>stop()</l>
<c>*能量梯度</c>
<l>* crop_part (Image,ImagePart00_Energy, 0, 0, Width-1, Height-1)</l>
<l>* crop_part (Image,ImagePart01_Energy, 0, 1, Width-1, Height-1)</l>
<l>* crop_part (Image,ImagePart10_Energy, 1, 0, Width-1, Height-1)</l>
<l>* convert_image_type (ImagePart00_Energy,ImagePart00_Energy,'real')</l>
<l>* convert_image_type (ImagePart10_Energy,ImagePart10_Energy,'real')</l>
<l>* convert_image_type (ImagePart01_Energy,ImagePart01_Energy,'real')</l>
<l>* sub_image (ImagePart10_Energy, ImagePart00_Energy, ImageSub_Energy, 1, 0)</l>
<l>* mult_image (ImageSub_Energy, ImageSub_Energy, ImageResult_Energy, 1, 0)</l>
<l>* sub_image (ImagePart01_Energy, ImagePart00_Energy, ImageSub_Energy2, 1, 0)</l>
<l>* mult_image (ImageSub_Energy, ImageSub_Energy2, ImageResult_Energy2, 1, 0)</l>
<l>* add_image (ImageSub_Energy, ImageResult_Energy2, ImageResult_Energy, 1, 0)</l>
<l>* intensity (ImageResult_Energy, ImageResult_Energy, Mean_Energy, Deviation_Energy)</l>
<l>* disp_message (WindowHandle, 'Energy:' + Mean_Energy, 'window', 12, 36, 'black', 'true')</l>
<l>* stop()</l>
<c>*Brenner</c>
<l>* crop_part (Image, ImagePart00_Brenner, 0, 0, Width, Height-2)</l>
<l>* convert_image_type (ImagePart00_Brenner, ImagePart00_Brenner, 'real')</l>
<l>* crop_part (Image, ImagePart20_Brenner, 2, 0, Width, Height-2)</l>
<l>* convert_image_type (ImagePart20_Brenner, ImagePart20_Brenner, 'real')</l>
<l>* sub_image (ImagePart20_Brenner, ImagePart00_Brenner, ImageSub_Brenner, 1, 0)</l>
<l>* mult_image (ImageSub_Brenner, ImageSub_Brenner, ImageResult_Brenner, 1, 0)</l>
<l>* intensity (ImageResult_Brenner, ImageResult_Brenner, Mean_Brenner, Deviation_Brenner)</l>
<l>* disp_message (WindowHandle, 'Brenner:' + Mean_Brenner, 'window', 12, 36, 'black', 'true')</l>
<l>* stop()</l>
<c>*Tenegrad</c>
<l>* sobel_amp (Image, EdgeAmplitude, 'sum_sqrt', 3)</l>
<l>* min_max_gray (EdgeAmplitude, EdgeAmplitude, 0, Min, Max, Range)</l>
<l>* threshold (EdgeAmplitude, Region_Tenegrad, 12, 255)</l>
<l>* region_to_bin (Region_Tenegrad, BinImage, 1, 0, Width, Height)</l>
<l>* mult_image (EdgeAmplitude, BinImage, ImageResult_TenegradMult, 1, 0)</l>
<l>* mult_image (ImageResult_TenegradMult, ImageResult_TenegradMult, ImageResult_Tenegrad, 1, 0)</l>
<l>* intensity (ImageResult_Tenegrad, ImageResult_Tenegrad, Mean_Tenegrad, Deviation_Tenegrad)</l>
<l>* disp_message (WindowHandle, 'Tenegrad:' + Mean_Tenegrad, 'window', 12, 36, 'black', 'true')</l>
<l>* stop()</l>
<c>*---------------------------------------------------</c>
<l>opening_rectangle1 (Region60, RegionOpening,10, 10)</l>
<l>shape_trans (RegionOpening, RegionTrans, 'convex')</l>
<l>rectangularity (RegionTrans, Rectangularity)</l>
<l>boundary (RegionTrans, RegionBorder, 'inner_filled')</l>
<c>*此处如果加m直线是不是可以拟合产品的边</c>
<l>fill_up_shape (RegionBorder, RegionFillUp, 'area', 1, 999999)</l>
<l>difference (RegionFillUp, Region60, RegionShell)</l>
<l>*opening_rectangle1 (RegionShell, RegionShellOpening1, 10, 10)</l>
<l>closing_rectangle1 (RegionShell, RegionClosing, 10, 10)</l>
<l>difference (Region60,RegionFillUp, RegionConvex)</l>
<l>*connection (RegionShellOpening1, ConnectedRegions)</l>
<l>connection (RegionClosing, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, ['width','height'], 'and', [20,10], [9999,9999])</l>
<l>smallest_rectangle1 (SelectedRegions, Row1, Column1, Row2, Column2)</l>
<l>if (|Row1|&gt;0)</l>
<l>    gen_rectangle1 (Rectangle, Row1, Column1, Row2, Column2)</l>
<l>endif</l>
<l>* smallest_rectangle2 (SelectedRegions, Row1, Column1, Phi1, Length11, Length21)</l>
<l>* gen_rectangle2 (Rectangle, Row1, Column1, Phi1, Length11, Length21)</l>
<l>dev_display (Rectangle)</l>
<l>stop()</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
